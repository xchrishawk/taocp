
* ex4.mixal
* Chris Vig (chris@invictus.so)

* -- Symbolic Constants --

TTY             EQU     19              Teletype device number
TTYBLK          EQU     14              Teletype block size

DATA            EQU     0:3             DATA field in word
LINK            EQU     4:5             LINK field in word

AVAILBUF        EQU     1000            Base address for AVAIL block
AVAILMAX        EQU     100             Number of words to use for AVAIL

* -- Instructions --

                ORIG    3000

* MAIN - main procedure

STACK           CON     0

MAIN            ENTA    1
                JMP     PUSH
                NOP     STACK

                ENTA    2
                JMP     PUSH
                NOP     STACK

                JMP     POP
                NOP     STACK
                JMP     UNDERFLOW

                ENTA    3
                JMP     PUSH
                NOP     STACK

                HLT

* PUSH - push a new element onto a stack
*
* Calling sequence:
*       - ENTA  (value to push)
*       - JMP   PUSH
*       - NOP   (address of stack top pointer)
*
* Postconditions:
*       - rI1 contains address of word that was pushed
*       - rA, rI2, and rI3 are modified

PUSH            STJ     9F              Subroutine linkage

                STJ     *+1(1:2)        rI2 := address of stack top pointer
                ENT2    *
                LD2     0,2(1:2)

                LD1     AVAIL           rI1 := pointer to next avail word
                J1Z     OVERFLOW        Overflow if necessary
                LD3     0,1(LINK)       Update AVAIL using rI3
                ST3     AVAIL

                STA     0,1(DATA)       Write rA into DATA field of new word
                LDA     0,2             Write stack top pointer into LINK field
                STA     0,1(LINK)

                ST1     0,2             Update stack top pointer

9H              JMP     *

* POP - pop an element off of a stack
*
* Calling sequence:
*       - JMP   POP
*       - NOP   (address of stack top pointer)
*       - JMP   (address to jump to in case of overflow)
*
* Postconditions:
*       - rA contains value popped off of the stack
*       - rI1 contains the address of the node popped off of the stack
*       - rI2 and rI3 are modified

POP             STJ     *+1(1:2)
                ENT3    *               rI3 := return address
                LD2     0,3(1:2)        rI2 := address of stack top pointer
                LD1     0,2             rI1 := address of stack top

                J1NZ    1F              If stack top is null...
                INC3    1                   underflow
                ST3     *+1(1:2)
                JMP     *

1H              INC3    2               Save off actual return address
                ST3     9F(1:2)

                LDA     0,1(DATA)       Get data we're popping off

                LD3     0,1(LINK)       Update stack top pointer
                ST3     0,2

                LD3     AVAIL(LINK)     Return freed word to AVAIL list
                ST3     0,1(LINK)
                ST1     AVAIL

9H              JMP     *

* OVERFLOW - allocate a new word of memory for AVAIL, if possible, otherwise halt
*
* Preconditions:
*       - none
*
* Postconditions:
*       - none

OVERFLOW        ST1     7F(1:2)                 Store register state
                ST2     8F(1:2)

                STJ     *+1(1:2)                Calculate return address and store
                ENT1    *
                DEC1    2
                ST1     9F(1:2)

                LD1     POOLMAX                 Get current POOLMAX
                CMP1    =AVAILBUF+AVAILMAX=     Is POOLMAX < maximum allowable?
                JL      *+2                     If not, halt and catch fire
                HLT     1

                LD2     AVAIL                   Store current AVAIL ptr into newly allocated word
                ST2     0,1(LINK)

                ST1     AVAIL                   Update AVAIL
                ENT2    1,1                     Update POOLMAX
                ST2     POOLMAX

7H              ENT1    *                       Restore registers
8H              ENT2    *
9H              JMP     *                       Return to caller

POOLMAX         CON     AVAILBUF

* UNDERFLOW - unrecoverable

UNDERFLOW       HLT     1

                END     MAIN
