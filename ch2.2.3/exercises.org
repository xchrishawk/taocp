#+TITLE: The Art of Computer Programming - Chapter 2.2.3 Exercises
#+AUTHOR: Chris Vig
#+EMAIL: chris@invictus.so

* Exercises

** Exercise 1

Operation (8) calls ~P ‚Üê AVAIL~, which is defined in operation (6). Operation
(6) will =OVERFLOW= if there are no available nodes remaining, so there's no
point in handling that case in operation (8).

** Exercise 2

This can be done using the following procedure:

#+NAME: ex2-push
#+BEGIN_SRC mixal :eval no
  ,* PUSH - push a new element onto a stack
  ,*
  ,* Calling sequence:
  ,*       - ENTA  (value to push)
  ,*       - JMP   PUSH
  ,*       - NOP   (address of stack top pointer)
  ,*
  ,* Postconditions:
  ,*       - rI1 contains address of word that was pushed
  ,*       - rA, rI2, and rI3 are modified

  PUSH            STJ     9F              Subroutine linkage

                  STJ     *+1(1:2)        rI2 := address of stack top pointer
                  ENT2    *
                  LD2     0,2(1:2)

                  LD1     AVAIL           rI1 := pointer to next avail word
                  J1Z     OVERFLOW        Overflow if necessary
                  LD3     0,1(LINK)       Update AVAIL using rI3
                  ST3     AVAIL

                  STA     0,1(DATA)       Write rA into DATA field of new word
                  LDA     0,2             Write stack top pointer into LINK field
                  STA     0,1(LINK)

                  ST1     0,2             Update stack top pointer

  9H              JMP     *
#+END_SRC

As an example, here is the resulting memory after pushing 1, 2, and 3 (in that
order) onto a stack:

#+NAME: ex2-example
#+BEGIN_SRC mixal :tangle ex2.mixal :noweb yes :exports results :mixvm m1097-m1099
  ,* ex2.mixal
  ,* Chris Vig (chris@invictus.so)

  ,* -- Symbolic Constants --

  <<common-constants>>

  ,* -- Instructions --

                  ORIG    3000

  <<common-initavail>>

  <<common-overflow-underflow>>

  <<ex2-push>>

  ,* MAIN - main procedure

  MAIN            JMP     INITAVAIL

                  ENTA    1
                  JMP     PUSH
                  NOP     STACK

                  ENTA    2
                  JMP     PUSH
                  NOP     STACK

                  ENTA    3
                  JMP     PUSH
                  NOP     STACK

                  HLT

  ,* -- Variables --

  STACK           CON     0               Pointer to top of stack

                  END     MAIN
#+END_SRC

#+RESULTS: ex2-example
: = Memory 1097-1099 =
: 1097: + 00 00 03 17 10 (0000013386)
: 1098: + 00 00 02 17 11 (0000009291)
: 1099: + 00 00 01 00 00 (0000004096)

** Exercise 3

This can be implemented as follows:

#+NAME: ex3-pop
#+BEGIN_SRC mixal :eval no
  ,* POP - pop an element off of a stack
  ,*
  ,* Calling sequence:
  ,*       - JMP   POP
  ,*       - NOP   (address of stack top pointer)
  ,*       - JMP   (address to jump to in case of overflow)
  ,*
  ,* Postconditions:
  ,*       - rA contains value popped off of the stack
  ,*       - rI1 contains the address of the node popped off of the stack
  ,*       - rI2 and rI3 are modified

  POP             STJ     *+1(1:2)
                  ENT3    *               rI3 := return address
                  LD2     0,3(1:2)        rI2 := address of stack top pointer
                  LD1     0,2             rI1 := address of stack top

                  J1NZ    1F              If stack top is null...
                  INC3    1                   underflow
                  ST3     *+1(1:2)
                  JMP     *

  1H              INC3    2               Save off actual return address
                  ST3     9F(1:2)

                  LDA     0,1(DATA)       Get data we're popping off

                  LD3     0,1(LINK)       Update stack top pointer
                  ST3     0,2

                  LD3     AVAIL(LINK)     Return freed word to AVAIL list
                  ST3     0,1(LINK)
                  ST1     AVAIL

  9H              JMP     *
#+END_SRC

Here is the output from pushing 1, 2, and 3 (in that order) onto the stack, and
then popping 4 times.

#+NAME: ex3-example
#+BEGIN_SRC mixal :tangle ex3.mixal :noweb yes :exports results :mixvm output m1097-m1099
  ,* ex3.mixal
  ,* Chris Vig (chris@invictus.so)

  ,* -- Symbolic Constants --

  <<common-constants>>

  ,* -- Instructions --

                  ORIG    3000

  <<common-initavail>>

  <<common-overflow-underflow>>

  <<ex2-push>>

  <<ex3-pop>>

  ,* MAIN - main procedure

  MAIN            JMP     INITAVAIL

                  ENTA    1
                  JMP     PUSH
                  NOP     STACK

                  ENTA    2
                  JMP     PUSH
                  NOP     STACK

                  ENTA    3
                  JMP     PUSH
                  NOP     STACK

                  JMP     POP
                  NOP     STACK
                  JMP     UNDERFLOW

                  JMP     POP
                  NOP     STACK
                  JMP     UNDERFLOW

                  JMP     POP
                  NOP     STACK
                  JMP     UNDERFLOW

                  JMP     POP
                  NOP     STACK
                  JMP     UNDERFLOW

                  HLT

  ,* -- Variables --

  STACK           CON     0               Pointer to top of stack

                  END     MAIN
#+END_SRC

#+RESULTS: ex3-example
: = Output =
: Running ...
: UFLOW
: ... done
:
: = Memory 1097-1099 =
: 1097: + 00 00 03 17 08 (0000013384)
: 1098: + 00 00 02 17 09 (0000009289)
: 1099: + 00 00 01 17 10 (0000005194)

** Exercise 4

This could be implemented as follows:

#+NAME: ex4-overflow
#+BEGIN_SRC mixal
  ,* OVERFLOW - allocate a new word of memory for AVAIL, if possible, otherwise halt
  ,*
  ,* Preconditions:
  ,*       - none
  ,*
  ,* Postconditions:
  ,*       - none

  OVERFLOW        ST1     7F(1:2)                 Store register state
                  ST2     8F(1:2)

                  STJ     *+1(1:2)                Calculate return address and store
                  ENT1    *
                  DEC1    2
                  ST1     9F(1:2)

                  LD1     POOLMAX                 Get current POOLMAX
                  CMP1    =AVAILBUF+AVAILMAX=     Is POOLMAX < maximum allowable?
                  JL      *+2                     If not, halt and catch fire
                  HLT     1

                  LD2     AVAIL                   Store current AVAIL ptr into newly allocated word
                  ST2     0,1(LINK)

                  ST1     AVAIL                   Update AVAIL
                  ENT2    1,1                     Update POOLMAX
                  ST2     POOLMAX

  7H              ENT1    *                       Restore registers
  8H              ENT2    *
  9H              JMP     *                       Return to caller

  POOLMAX         CON     AVAILBUF

  ,* UNDERFLOW - unrecoverable

  UNDERFLOW       HLT     1
#+END_SRC

Output of an example run after pushing =1=, pushing =2=, popping =2=, and then
pushing =3= is:

#+NAME: ex4-example
#+BEGIN_SRC mixal :tangle ex4.mixal :noweb yes :exports results :mixvm m1000-m1003
  ,* ex4.mixal
  ,* Chris Vig (chris@invictus.so)

  ,* -- Symbolic Constants --

  <<common-constants>>

  ,* -- Instructions --

                  ORIG    3000

  ,* MAIN - main procedure

  STACK           CON     0

  MAIN            ENTA    1
                  JMP     PUSH
                  NOP     STACK

                  ENTA    2
                  JMP     PUSH
                  NOP     STACK

                  JMP     POP
                  NOP     STACK
                  JMP     UNDERFLOW

                  ENTA    3
                  JMP     PUSH
                  NOP     STACK

                  HLT

  <<ex2-push>>

  <<ex3-pop>>

  <<ex4-overflow>>

                  END     MAIN
#+END_SRC

#+RESULTS: ex4-example
: = Memory 1000-1003 =
: 1000: + 00 00 01 00 00 (0000004096)
: 1001: + 00 00 03 15 40 (0000013288)
: 1002: + 00 00 00 00 00 (0000000000)
: 1003: + 00 00 00 00 00 (0000000000)

* Common Code

** Constants

The following symbolic constants are used by several exercises:

#+NAME: common-constants
#+BEGIN_SRC mixal :eval no
  TTY             EQU     19              Teletype device number
  TTYBLK          EQU     14              Teletype block size

  DATA            EQU     0:3             DATA field in word
  LINK            EQU     4:5             LINK field in word

  AVAILBUF        EQU     1000            Base address for AVAIL block
  AVAILMAX        EQU     100             Number of words to use for AVAIL
#+END_SRC

** =AVAIL= Linked List Initialization

To use the =AVAIL= pointer, we need to have a linked list of available nodes
already initialized and ready to go. The following procedure will set this up:

#+NAME: common-initavail
#+BEGIN_SRC mixal :eval no
  ,* INITAVAIL - initialize AVAIL linked list

  INITAVAIL       STJ     9F                      Subroutine linkage

                  ENT1    AVAILMAX-1              rI1 := index of first available word
                  ENTA    AVAILBUF,1              rA := address of first available word
                  STA     AVAIL                   AVAIL := address of first avaialble word

  1H              ENTA    AVAILBUF-1,1            Get address of next available word
                  STA     AVAILBUF,1(LINK)        Store pointer in link field
                  DEC1    1                       Decrement index
                  J1Z     2F                      Are we out of nodes?
                  JMP     1B                      If not, loop again

  2H              STZ     0,1                     Store null pointer in last avail word
  9H              JMP     *                       Return to caller

  AVAIL           CON     0                       Pointer to next available node
#+END_SRC

As an example, executing this block using the code gives the following linked
list in memory. =AVAIL= is set to =1099=.

#+NAME: common-initavail-example
#+BEGIN_SRC mixal :noweb yes :exports results :mixvm m1000-m1005 m1095-m1100
  ,* -- Symbolic Constants --

  <<common-constants>>

  ,* -- Instructions --

                  ORIG    3000

  ,* MAIN - main procedure

  MAIN            JMP     INITAVAIL
                  HLT

  <<common-initavail>>

                  END     MAIN
#+END_SRC

#+RESULTS: common-initavail-example
#+begin_example
= Memory 1000-1005 =
1000: + 00 00 00 00 00 (0000000000)
1001: + 00 00 00 15 40 (0000001000)
1002: + 00 00 00 15 41 (0000001001)
1003: + 00 00 00 15 42 (0000001002)
1004: + 00 00 00 15 43 (0000001003)
1005: + 00 00 00 15 44 (0000001004)

= Memory 1095-1100 =
1095: + 00 00 00 17 06 (0000001094)
1096: + 00 00 00 17 07 (0000001095)
1097: + 00 00 00 17 08 (0000001096)
1098: + 00 00 00 17 09 (0000001097)
1099: + 00 00 00 17 10 (0000001098)
1100: + 00 00 00 00 00 (0000000000)
#+end_example

** Overflow/Underflow

Here are simple "crash and burn" subroutines for =OVERFLOW= and =UNDERFLOW= to
gracefully handle these conditions and halt the computer.

#+NAME: common-overflow-underflow
#+BEGIN_SRC mixal :eval no
  ,* UNDERFLOW/OVERFLOW - print error message and halt

  UNDERFLOW       LDA     1F
                  JMP     *+2
  OVERFLOW        LDA     2F
                  STA     3F
                  OUT     3F(TTY)
                  HLT     1
  1H              ALF     "UFLOW"
  2H              ALF     "OFLOW"
  3H              ORIG    *+TTYBLK
#+END_SRC
