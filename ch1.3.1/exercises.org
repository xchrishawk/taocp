* Chapter 1.3.1 - Description of MIX

** Exercise 1

A MIX byte must be capable of holding at least 64 distinct values. log3(64) is
~3.7856, so it would have to have 4 "trits" in order to have a large enough
range to support the minimum 64 values.

** Exercise 2

We can assume that each byte holds at least 64 independent values. Therefore the
number of bytes required is log64(99999999), which is ~4.4292, so we would need
5 bytes to fully hold the value.

** Exercise 3

- address field :: (1:2)
- index field :: (3:3)
- field field :: (4:4)
- operation code :: (5:5)

** Exercise 4

The overall address is =-2000,4=, which means that the actual address will be
=-2000 + rI4=. As long as =rI4= contains 2000 or greater, the derived address
will be positive (and therefore valid).

** Exercise 5

The code is:

| S | A-A | I | F | C |
|---+-----+---+---+---|
| - |  80 | 3 | 5 | 4 |

Therefore the values are as follows:

- opcode :: 4
- modification :: 5
- index specification :: 3
- address :: -80

This corresponds to the following instruction:

=DIV -80,3=

** Exercise 6

:PROPERTIES:
:header-args: :noweb yes :exports results
:END:

We can use the following simple program to evaluate this:

#+NAME: ch-1-3-1-ex-6
#+BEGIN_SRC mixal :exports code
          ORIG    3000
  VALUE   CON     5(1:1),1(2:2),200(3:4),15(5:5)
  START   %INST%  %ADDR%
          HLT
          END     START
#+END_SRC

=%INST%= and =%ADDR%= are macros which can be replaced with the appropriate
instruction and memory address as needed.

The results are:

*=LDAN 3000=*

#+BEGIN_SRC mixal :mixvm rA :var %INST%="LDAN" %ADDR%="3000"
<<ch-1-3-1-ex-6>>
#+END_SRC

#+RESULTS:
: = Register A =
: rA: - 05 01 03 08 15 (0084161039)

The =rA= register is set to the same value as memory location 3000, except that
the sign bit is inverted.

*=LD2N 3000(3:4)=*

#+BEGIN_SRC mixal :mixvm rI2 :var %INST%="LD2N" %ADDR%="3000(3:4)"
<<ch-1-3-1-ex-6>>
#+END_SRC

#+RESULTS:
: = Register I2 =
: rI2: - 03 08 (0200)

The =rI2= register is set to -200.

*=LDX 3000(1:3)=*

#+BEGIN_SRC mixal :mixvm rX :var %INST%="LDX" %ADDR%="3000(1:3)"
<<ch-1-3-1-ex-6>>
#+END_SRC

#+RESULTS:
: = Register X =
: rX: + 00 00 05 01 03 (0000020547)

The =rX= register is set to 5(3:3),1(4:4),??(5:5). The result is partially undefined
since we are taking half of the 200(3:4) field from memory address 3000. The
result would depend on whether the underlying hardware was binary or decimal.

*=LD6 3000=*

#+BEGIN_SRC mixal :mixvm rI6 :var %INST%="LD6" %ADDR%="3000"
<<ch-1-3-1-ex-6>>
#+END_SRC

#+RESULTS:
: = Register I6 =
: rI6: + 08 15 (0527)

This result is completely undefined since we are attempting to place too many bytes
into the =rI6= register.

*=LDXN 3000(0:0)=*

#+BEGIN_SRC mixal :noweb yes :exports results :mixvm rX :var %INST%="LDXN" %ADDR%="3000(0:0)"
<<ch-1-3-1-ex-6>>
#+END_SRC

#+RESULTS:
: = Register X =
: rX: - 00 00 00 00 00 (0000000000)

=rX= is unaffected and remains at zero, /except/ that the sign bit is set to negative.

** Exercise 9

The following instructions can affect the overflow toggle:

=ADD=, =INCA=, =INCX=, =NUM=

** Exercise 11

The following instructions can affect the =rI1= register:

=LD1=, =LD1N=, =ENT1=, =ENN1=, =INC1=, =DEC1=, =MOVE=

** Exercise 13

There would be no difference between =JOV 1001= and =JNOV 1001= - in either case
the PC would end up at 1001 with the OF flag cleared. If the instruction is set
to =JOV 1000=, it would execute that instruction twice. If the instruction is set
to =JNOV 1000=, it would execute that instruction an infinite number of times.

** Exercise 16

*** Shortest Possible
